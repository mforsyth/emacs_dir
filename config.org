* Literate Emacs config

  I don't use package.el or el-get, or anything like it. git submodules have
  been enough so far.

  I don't use Customize, because I think it makes it harder to organize
  customizations.

  I use one Emacs instance per project.

** Core

   Disable Emacs' "splash screen".

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

   Never make backups.

   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
   #+END_SRC

   Use a nice themes.

   #+BEGIN_SRC emacs-lisp
     (require 'base16-default-theme)
   #+END_SRC

   We use evil-mode.

   #+BEGIN_SRC emacs-lisp
     (require 'evil)

     (evil-mode 1)
   #+END_SRC

*** Frame configuration

    I don't need menus, toolbars and scrollbars.

    The cursor should stay between characters instead of over a character.

    #+BEGIN_SRC emacs-lisp
      (setq initial-frame-alist
            (setq default-frame-alist '((menu-bar-lines . 0)
                                        (tool-bar-lines . 0)
                                        (vertical-scroll-bars . nil))))
    #+END_SRC

    Don't want the cursor to blink.

    #+BEGIN_SRC emacs-lisp
      (blink-cursor-mode -1)
    #+END_SRC

    Use a single fringe (the vertical bar on the side of an emacs frame).

    #+BEGIN_SRC emacs-lisp
      (fringe-mode '(0 . 4))
    #+END_SRC

    Use a nice font and size it appropriately.

    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 100 :family "Envy Code R")
    #+END_SRC

*** Window Navigation

    Since I disabled scrollbars, I'd like at least to see where I am in the
    file.

    #+BEGIN_SRC emacs-lisp
      (column-number-mode 1)
      (line-number-mode 1)
    #+END_SRC

    Make it possible to navigate windows directionally.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-h") 'windmove-left)
      (global-set-key (kbd "s-l") 'windmove-right)
    #+END_SRC

*** Modeline

    Since we use Evil, use =evil-powerline=.

    #+BEGIN_SRC emacs-lisp
      (require 'powerline)
      (require 'powerline-evil)
      (powerline-evil-center-color-theme)
    #+END_SRC

*** Minibuffer

    Disambiguate file names. This will show files in a format like
    =name<dir/subdir>=.

    #+BEGIN_SRC emacs-lisp
      (require 'uniquify)

      (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    #+END_SRC

    Make it easier to answer yes/no questions.

    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

     Use =C-w= to erase words.

     #+BEGIN_SRC emacs-lisp
       (define-key minibuffer-local-map "\C-w" 'backward-kill-word)
     #+END_SRC

*** File history

    Remember lots of files that we previously visited.

    #+BEGIN_SRC emacs-lisp
      (setq recentf-max-saved-items 10000)
    #+END_SRC

** Text editing

   No tabs.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

   Set point at which text wraps.

   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80)
   #+END_SRC

   Allow easy exchange of text units with Evil.

   #+BEGIN_SRC emacs-lisp
     (require 'evil-exchange)
     (evil-exchange-install)
   #+END_SRC

*** Navigation

    Scroll just enough text to bring the cursor into view.

    #+BEGIN_SRC emacs-lisp
      (setq scroll-conservatively 1000)
    #+END_SRC

    Make it easy to see where I am by highlighting the line the cursor is on.

    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode 1)
    #+END_SRC

**** Jumping to specific spots (Ace jump)

     #+BEGIN_SRC emacs-lisp
       (require 'ace-jump-mode)
     #+END_SRC

     Respect case of hint text.

     #+BEGIN_SRC emacs-lisp
       (setq ace-jump-mode-case-fold nil)
     #+END_SRC

     Limit jump to current window.

     #+BEGIN_SRC emacs-lisp
       (setq ace-jump-mode-scope 'window)
     #+END_SRC

     Set shortcut to jump to word.

     #+BEGIN_SRC emacs-lisp
       (global-set-key "\C-xj" 'ace-jump-word-mode)
     #+END_SRC

*** Markdown

    #+BEGIN_SRC emacs-lisp
      (require 'markdown-mode)
    #+END_SRC

    Automatically switch to markdown mode given certain file extensions:

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\.md$" . markdown-mode))
    #+END_SRC

    Markdown inserts explicit line breaks when you hard-wrap a paragraph. We
    want to avoid that and let the design of the page decide where the text
    should wrap.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'markdown-mode-hook (lambda () (setq fill-column nil)))
    #+END_SRC

*** Copying

    Remember a good amount of copied text.

    #+BEGIN_SRC emacs-lisp
      (setq kill-ring-max 1000)
    #+END_SRC

**** X integration

     It's nice to be able to easily copy/paste to/from other X applications.

     #+BEGIN_SRC emacs-lisp
       (setq x-select-enable-clipboard t)
       (setq select-active-regions t)
       (setq interprogram-paste-function 'x-cut-buffer-or-selection-value)
     #+END_SRC

*** Undo

    I never really tried to use this much. But it's here as a reminder that I
    need to look into it.

    #+BEGIN_SRC emacs-lisp
      (require 'undo-tree)
    #+END_SRC

*** Managing pairs

   #+BEGIN_SRC emacs-lisp
     (require 'evil-surround)
     (global-evil-surround-mode 1)
   #+END_SRC

** Programming

   Highlight matching parentheses.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

   Make sure no trailing spaces are left when saving a file.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

*** Arguments

    #+BEGIN_SRC emacs-lisp
      (require 'evil-args)
    #+END_SRC

    Arguments text object.

    #+BEGIN_SRC emacs-lisp
      (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
      (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
    #+END_SRC

    Argument motion commands.

    #+BEGIN_SRC emacs-lisp
      (define-key evil-normal-state-map "L" 'evil-forward-arg)
      (define-key evil-normal-state-map "H" 'evil-backward-arg)
      (define-key evil-motion-state-map "L" 'evil-forward-arg)
      (define-key evil-motion-state-map "H" 'evil-backward-arg)
    #+END_SRC

    I don't know what this is.

    #+BEGIN_SRC emacs-lisp
      (define-key evil-normal-state-map "K" 'evil-jump-out-args)
    #+END_SRC

*** Block matching

    #+BEGIN_SRC emacs-lisp
      (require 'evil-matchit)
      (global-evil-matchit-mode 1)
    #+END_SRC

*** Flycheck

    Provides on the fly syntax checking/linting.

    #+BEGIN_SRC emacs-lisp
      (require 'flycheck)

      (add-hook 'after-init-hook #'global-flycheck-mode)
    #+END_SRC

*** Vertical rule

    Let modes display a vertical rule.

    #+BEGIN_SRC emacs-lisp
      (require 'fill-column-indicator)

      (setq fci-rule-width 1)
      (setq fci-rule-color "#303030")
    #+END_SRC

** Programming languanges
*** Cucumber

   #+BEGIN_SRC emacs-lisp
     (require 'feature-mode)
   #+END_SRC

   Handle =*.feature= files with =feature-mode=.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
   #+END_SRC

   We want to disregard all settings in =cucumber.yml= and use our own.

   #+BEGIN_SRC emacs-lisp
     (setq feature-cucumber-command "bin/cucumber -rfeatures -P -f pretty {options} {feature}")
   #+END_SRC

   Enable =fci-mode= so we know when steps are getting too big.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'feature-mode-hook 'fci-mode)
   #+END_SRC

*** Slim

    #+BEGIN_SRC emacs-lisp
      (require 'slim-mode)
    #+END_SRC

** Source control

   Enable =git= integration.

   #+BEGIN_SRC emacs-lisp
     (require 'vc-git)
   #+END_SRC

   Use magit as the git interface.

   #+BEGIN_SRC emacs-lisp
     (require 'magit)
   #+END_SRC

   Don't revert a change without asking first.

   #+BEGIN_SRC emacs-lisp
     (setq magit-revert-item-confirm t)
   #+END_SRC

   Tell magit where to find repositories by default.

   #+BEGIN_SRC emacs-lisp
     (setq magit-repo-dirs '("~/projects/"))
   #+END_SRC

   Configure magit browser windows.

   #+BEGIN_SRC emacs-lisp
     (defun magit/browser ()
       (interactive)
       (magit/make-status-frame)
       (magit/make-log-frame)
       (magit/make-commit-frame))

     (defun magit/make-status-frame ()
       (select-frame (make-frame))
       (magit-status "."))

     (defun magit/make-log-frame ()
       (magit/-make-frame-with-buffer "*magit-log*")
       (magit-log))

     (defun magit/make-commit-frame ()
       (magit/-make-frame-with-buffer "*magit-commit*"))

     (defun magit/-make-frame-with-buffer (name)
       (select-frame (make-frame))
       (display-buffer (get-buffer-create name)
                       '(display-buffer-same-window . ())))
   #+END_SRC

   Conform to git log's style rules. See
   http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'git-commit-mode-hook
               (lambda () (setq fill-column 70)))
   #+END_SRC

*** Buffer selection

    Open the git commit message editor in a new window.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'display-buffer-alist
                   '("^COMMIT_EDITMSG$" . (display-buffer-pop-up-window . nil)))
    #+END_SRC

    Replace the current buffer with the magit status buffer.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'display-buffer-alist
                   '("^\\*magit:" . (display-buffer-same-window . nil)))
    #+END_SRC

** Project management
*** Clock file

    Make it possible to jump to the clock buffer.

    #+BEGIN_SRC emacs-lisp
      (defun display-clock ()
        (interactive)
        (find-file-other-frame (expand-file-name "~/.clock.org")))
    #+END_SRC

    And make it easy to jump to the clock buffer.

    #+BEGIN_SRC emacs-lisp
      (global-set-key "\C-ck" 'display-clock)
    #+END_SRC
